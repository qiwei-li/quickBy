shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
?selectInput
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
?png
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
?img
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
load(file.choose())
head(ad)
head(which(is.na(ad$FOUR_YR_GRAD)))
ad[49890:49900, ]
tmp = rep(NA, nrow(ad))
tmp[ad$PROB>=50]=1
tmp[ad$PROB<50]=0
table(ad$FOUR_YR_GRAD[!is.na(ad$FOUR_YR_GRAD)] == tmp[!is.na(ad$FOUR_YR_GRAD)])
head(ad)
head[ad[ad$PROB>=0.8], ]
head(ad[ad$PROB>=0.8], )
head(ad[ad$PROB>=0.8, ])
tmp = rep(NA, nrow(ad))
tmp[ad$PROB>=0.5]=1
tmp[ad$PROB<0.5]=0
table(ad$FOUR_YR_GRAD[!is.na(ad$FOUR_YR_GRAD)] == tmp[!is.na(ad$FOUR_YR_GRAD)])
42967/(12866+42967)
rm(ad)
head(ad)
load(file.choose())
head(ad)
ad$TERM = gsub('^([0-9]{4})[0-9]{2}','\\1',ad$YEAR)
head(ad)
ad$YEAR<-NULL
head(ad)
save(ad,file="~/Dropbox/my")
save(ad,file="~/Desktop/my first shiny/ad.rda")
rm(all)
rm("all")
load(file.choose())
shiny::runApp('Desktop/my first shiny')
table(ad$TERM)
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
?sliderInput
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
table(ad$PROB==1)
shiny::runApp('Desktop/my first shiny')
table(ad$TERM[ad$PROB==1])
table(is.na(ad$PROB))
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
?radioButtons
names(ad)
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
head(ad)
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
shiny::runApp('Desktop/my first shiny')
?percent_map
setwd("~/Github/quickBy/")
source("wrapper.R")
load("~/Desktop/tmp.rda")
raw_course$PT_ID = paste0(raw_course$PIDM, raw_course$TERM)
head(raw_course)
a = quickBy(raw_course$PT_ID, raw_course$STUDENT_NORM_GP, method = "count")
head(a)
head(levels(as.factor(raw_course$PT_ID)))
raw_course[which(raw_course$PT_ID==1000742200010), ]
raw_course[which(raw_course$PT_ID==1000742200101), ]
raw_course[which(raw_course$PT_ID==1000777200107), ]
length(a)
table(is.na(a))
a = quickBy(raw_course$PT_ID, raw_course$STUDENT_NORM_GP, method = "count")
source("wrapper.R")
a = quickBy(raw_course$PT_ID, raw_course$STUDENT_NORM_GP, method = "count")
head(a)
length(a)
length(a[[5]])
table(is.na(a))
table(is.na(a)[[5]])
table(is.na(a[[5]]))
source("wrapper.R")
a = quickBy(raw_course$PT_ID, raw_course$STUDENT_NORM_GP, method = "count")
str(a)
length(unique(a[[2]]))
source("wrapper.R")
a = quickBy(raw_course$PT_ID, raw_course$STUDENT_NORM_GP, method = "count")
str(a)
source("wrapper.R")
a = quickBy(raw_course$PT_ID, raw_course$STUDENT_NORM_GP, method = "count")
str(a)
source("wrapper.R")
b = quickBy(raw_course$PT_ID, raw_course$STUDENT_NORM_GP, method = "count")
str(b)
length(raw_course$PT_ID)
table(is.na(raw_course$PT_ID))
keysKeep = !is.na(raw_course$PT_ID)
class(raw_course$PT_ID)
table(is.na(as.numeric(raw_course$PT_ID)))
which(is.na(as.numeric(raw_course$PT_ID)))
raw_course[which(is.na(as.numeric(raw_course$PT_ID))), ]
table(is.na(raw_course$PIDM))
setwd("~/Dropbox/iAMSTEM course difficulty/computation/")
list.files()
print(load("raw_course.rda"))
print(table(is.na(raw_course$PIDM)))
check = function(){
print(class(raw_course$PIDM))
print(table(is.na(raw_course$PIDM)))
print(class(raw_course$TERM))
print(table(is.na(raw_course$TERM)))
}
print(load("raw_course.rda"))
head(raw_course)
check()
check = function(){
print(class(raw_course$PIDM))
print(as.character(table(is.na(raw_course$PIDM))))
print(class(raw_course$TERM))
print(as.character(table(is.na(raw_course$TERM))))
}
check()
q = c(NA, 1, 2)
print(table(is.na(q)))
print(as.character(table(is.na(q))))
head(raw_course)
check()
table(raw_course$REG_STATUS_CODE)
raw_course$REG_STATUS_CODE = as.character(raw_course$REG_STATUS_CODE)
raw_course = raw_course[raw_course$REG_STATUS_CODE == "RE", ]
table(raw_course$REG_STATUS_CODE)
check()
print(load("raw_course.rda"))
head(raw_course)
check()
table(raw_course$REG_STATUS_CODE)
raw_course$REG_STATUS_CODE = as.character(raw_course$REG_STATUS_CODE)
raw_course = raw_course[which(raw_course$REG_STATUS_CODE == "RE"), ]
table(raw_course$REG_STATUS_CODE)
check()
table(raw_course$REG_STATUS_CODE)
raw_course$REG_STATUS_CODE = as.character(raw_course$REG_STATUS_CODE)
print(load("raw_course.rda"))
table(raw_course$REG_STATUS_CODE)
raw_course$REG_STATUS_CODE = as.character(raw_course$REG_STATUS_CODE)
length(raw_course$REG_STATUS_CODE == "RE")
length(which(raw_course$REG_STATUS_CODE == "RE"))
length(which((raw_course$REG_STATUS_CODE == "RE")==TRUE))
print(load("raw_course.rda"))
head(raw_course)
check()
check = function(){
print(class(raw_course$PIDM))
print(as.character(table(is.na(raw_course$PIDM))))
print(class(raw_course$TERM))
print(as.character(table(is.na(raw_course$TERM))))
}
check()
table(raw_course$REG_STATUS_CODE)
raw_course$REG_STATUS_CODE = as.character(raw_course$REG_STATUS_CODE)
raw_course = raw_course[which(raw_course$REG_STATUS_CODE == "RE"), ]
table(raw_course$REG_STATUS_CODE)
check()
table(raw_course$GRADE)
raw_course$GRADE = as.character(raw_course$GRADE)
check()
raw_course$GRADE_PT[which(raw_course$GRADE == "P")] = NA
raw_course$GRADE_PT[which(raw_course$GRADE == "NP")] = NA
check()
table(is.na(raw_course$DIFFICULTY_ID)) #1092, because 1092 blank instructor pidm
raw_course$DIFFICULTY_ID[which(raw_course$GRADE == "P")] = NA
raw_course$DIFFICULTY_ID[which(raw_course$GRADE == "NP")] = NA
table(is.na(raw_course$DIFFICULTY_ID)) #443232, because removing P/NP courses
check()
table(raw_course$GRADE)
raw_course$GRADE_PT[raw_course$GRADE == "P*"] = NA
raw_course$GRADE_PT[raw_course$GRADE == "NP*"] = 0
table(raw_course$GRADE_PT[raw_course$GRADE == "NP*"])
check()
class(raw_course$DIFFICULTY_ID)
table(is.na(raw_course$DIFFICULTY_ID))
table(which(is.na(raw_course$DIFFICULTY_ID)))
raw_course = raw_course[order(raw_course$DIFFICULTY_ID), ]
check()
range(raw_course$DIFFICULTY_ID, na.rm = TRUE)
myfun = function(df){
#cat(paste0(df$DIFFICULTY_ID[1]/128952,"           \r"))
list(mean(df$GRADE_PT, na.rm = TRUE), sd(df$GRADE_PT, na.rm = TRUE), nrow(df))
}
system.time(ans <- by(raw_course, raw_course$DIFFICULTY_ID, function(x) myfun(x)))
length(unique(raw_course$DIFFICULTY_ID)) #77225
length(ans) #77224, we are missing 1 ID, that is the ID "NA"
unique(raw_course$DIFFICULTY_ID)[which(!unique(raw_course$DIFFICULTY_ID) %in% as.numeric(names(ans)))]
m = as.data.frame(cbind(names(ans), matrix(unlist(ans), ncol=3, byrow = TRUE)))
head(m)
names(m) = c("DIFFICULTY_ID", "MEAN_COURSE_GP", "SD_COURSE_GP", "NUM_OF_STUDENT")
str(m)
m$DIFFICULTY_ID = as.numeric(as.character(m$DIFFICULTY_ID))
m$MEAN_COURSE_GP = as.numeric(as.character(m$MEAN_COURSE_GP))
m$SD_COURSE_GP = as.numeric(as.character(m$SD_COURSE_GP))
m$NUM_OF_STUDENT = as.numeric(as.character(m$NUM_OF_STUDENT))
### One imputation here is to the SD_COURSE_GPA
### If the mean is not NA, but the sd is
### this means, there was only one stuent in that class
### we should change the sd to 0
head(m)
str(m)
table(m$NUM_OF_STUDENT[!is.na(m$MEAN_COURSE_GP) & is.na(m$SD_COURSE_GP)])
which(m$NUM_OF_STUDENT[!is.na(m$MEAN_COURSE_GP) & is.na(m$SD_COURSE_GP)]==11)
(m[!is.na(m$MEAN_COURSE_GP) & is.na(m$SD_COURSE_GP), ])[5482, ]
raw_course[which(raw_course$DIFFICULTY==69707), ]
m$SD_COURSE_GP[!is.na(m$MEAN_COURSE_GP) & is.na(m$SD_COURSE_GP)]=0
#write.csv(m, file = "Mean_And_Sd_Course_GPA.csv", row.names = FALSE)
raw_course = merge(raw_course, m, by="DIFFICULTY_ID", all.x=TRUE)
head(raw_course)
check()
class(raw_course$GRADE_PT)
class(raw_course$MEAN_COURSE_GP)
class(raw_course$SD_COURSE_GP)
raw_course$STUDENT_NORM_GP = (raw_course$GRADE_PT - raw_course$MEAN_COURSE_GP)/raw_course$SD_COURSE_GP
class(raw_course$STUDENT_NORM_GP)
table(raw_course$SD_COURSE_GP[is.nan(raw_course$STUDENT_NORM_GP)])
raw_course$STUDENT_NORM_GP[which(raw_course$SD_COURSE_GP==0)]=0
check()
save(raw_course, file="~/Desktop/tmp.rda")
load("~/Desktop/tmp.rda")
setwd("~/Github/quickBy/")
load("~/Desktop/tmp.rda")
setwd("~/Github/quickBy/")
source("wrapper.R")
check = function(){
print(class(raw_course$PIDM))
print(as.character(table(is.na(raw_course$PIDM))))
print(class(raw_course$TERM))
print(as.character(table(is.na(raw_course$TERM))))
print(class(raw_course$PT_ID))
print(as.character(table(is.na(raw_course$PT_ID))))
}
raw_course$PT_ID = paste0(raw_course$PIDM, raw_course$TERM)
class(raw_course)
class(raw_course$PT_ID)
a = head(raw_course$PT_ID)
a
as.numeric(a)
as.integer(a)
table(is.na(as.numeric(raw_course$PT_ID)))
check()
raw_course$PT_ID = as.numeric(raw_course$PT_ID)
check()
head(raw_course)
source("wrapper.R")
a = quickBy(raw_course$PT_ID, raw_course$STUDENT_NORM_GP, method = "count")
str(a)
source("wrapper.R")
source("wrapper.R")
b = quickBy(raw_course$PT_ID, raw_course$STUDENT_NORM_GP, method = "count")
str(b)
setwd("~/Github/quickBy/")
source("wrapper.R")
a = c(0, NA,1,1,1,3,3,3,3,3)
b = c(NA, 2, 10, 7, 15, 10, 7, -10, 7.2, 5)
length(a)
length(b)
a = c(0, NA,1,1,1,3,3,3,3)
b = c(NA, 2, 10, 7, 15, 10, 7, -10, 7.2)
quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
quickBy(a,b,"mean") # should equal NA 10.66667 10.66667 10.66667  2.30000  2.30000  2.30000  2.30000  2.30000
quickBy(a,b,"sum") # should equal: NA 32.0 32.0 32.0  9.2  9.2  9.2  9.2  9.2
options()
class(options())
names(options())
options()[22]
options(error = NULL)
setwd("~/Github/quickBy/")
source("wrapper.R")
setwd("~/Github/quickBy/")
source("wrapper.R")
a = c(0, NA,1,1,1,3,3,3,3)
b = c(NA, 2, 10, 7, 15, 10, 5, -10, NA)
quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 10, 7, 15, 10, 5.6, -10, NA))
quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
class(a)=="numeric"
class(a)!="numeric"
class(a)!="numeric" & class(a)!="integer"
source("wrapper.R")
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a
source('~/Github/quickBy/wrapper.R')
source('~/Github/quickBy/wrapper.R')
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a
source('~/Github/quickBy/wrapper.R')
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a
source('~/Github/quickBy/wrapper.R')
setwd("~/Github/quickBy/")
source("wrapper.R")
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a
integer(10)
class(integer(10))
source('~/Github/quickBy/wrapper.R')
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
source('~/Github/quickBy/wrapper.R')
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a
class(numeric(10))
source('~/Github/quickBy/wrapper.R')
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
source('~/Github/quickBy/wrapper.R')
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
source('~/Github/quickBy/wrapper.R')
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a
source('~/Github/quickBy/wrapper.R')
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
source('~/Github/quickBy/wrapper.R')
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a
source('~/Github/quickBy/wrapper.R')
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a
source('~/Github/quickBy/wrapper.R')
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a
source('~/Github/quickBy/wrapper.R')
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a
source('~/Github/quickBy/wrapper.R')
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
a = quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a
quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a = as.numeric(c(0, NA,1,1,1,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, NA))
quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
a = as.numeric(c(0, NA,1,1,1,3,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, 2.4, NA))
quickBy(a,b,"count") # should equal: NA  3  3  3  4  4  4  4  4
setwd("~/Github/quickBy/")
source("wrapper.R")
a = as.numeric(c(0, NA,1,1,1,3,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, 2.4, NA))
quickBy(a,b,"min")
source("wrapper.R")
a = as.numeric(c(0, NA,1,1,1,3,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, 2.4, NA))
quickBy(a,b,"min")
quickBy(a,b,"count") #should be: NA NA  3  3  3  4  4  4  4 NA
source("wrapper.R")
a = as.numeric(c(0, NA,1,1,1,3,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, 2.4, NA))
quickBy(a,b,"min")
source("wrapper.R")
a = as.numeric(c(0, NA,1,1,1,3,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, 2.4, NA))
quickBy(a,b,"min")
quickBy(a,b,"count") #should be: NA NA  3  3  3  4  4  4  4 NA
source("wrapper.R")
a = as.numeric(c(0, NA,1,1,1,3,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, 2.4, NA))
quickBy(a,b, "max")
quickBy(a,b,"min")
quickBy(a,b,"count") #should be: NA NA  3  3  3  4  4  4  4 NA
source("wrapper.R")
a = as.numeric(c(0, NA,1,1,1,3,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, 2.4, NA))
quickBy(a,b, "max")
quickBy(a,b,"sum")
source("wrapper.R")
a = as.numeric(c(0, NA,1,1,1,3,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, 2.4, NA))
quickBy(a,b,"mean")
length(quickBy(a,b,"mean"))
length(quickBy(a,b,"sum"))
length(quickBy(a,b,"count"))
w = quickBy(a,b,"count")
q = quickBy(a,b,"sum")
q
w
q/w
source("wrapper.R")
a = as.numeric(c(0, NA,1,1,1,3,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, 2.4, NA))
quickBy(a,b,"mean")
source("wrapper.R")
a = as.numeric(c(0, NA,1,1,1,3,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, 2.4, NA))
quickBy(a,b,"mean")
quickBy(a,b,"sum")
quickBy(a,b,"sum")/quickBy(a,b,"count")
source("wrapper.R")
a = as.numeric(c(0, NA,1,1,1,3,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, 2.4, NA))
quickBy(a,b,"mean")
source("wrapper.R")
a = as.numeric(c(0, NA,1,1,1,3,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, 2.4, NA))
quickBy(a,b,"mean")
source("wrapper.R")
quickBy(a,b,"mean")
source("wrapper.R")
quickBy(a,b,"mean")
quickBy(a,b,"sum")/quickBy(a,b,"count")
NA/NA
wtf = function(){
a = c(NA,2)
b = c(NA,3)
return(a/b)
}
wtf()
length(c(NA,NA,1,2,NA))
source("wrapper.R")
a = as.numeric(c(0, NA,1,1,1,3,3,3,3,3))
b = as.numeric(c(NA, 2, 10, 7, 15, 10, 5.6, -10, 2.4, NA))
quickBy(a,b,"mean")
